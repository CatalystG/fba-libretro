DEBUG = 0

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
endif
endif

MAIN_FBA_DIR := src
FBA_BURN_DIR := $(MAIN_FBA_DIR)/burn
FBA_BURN_DRIVERS_DIR := $(MAIN_FBA_DIR)/burn/drv
FBA_BURNER_DIR := $(MAIN_FBA_DIR)/burner
LIBSNES_DIR := $(FBA_BURNER_DIR)/libsnes
FBA_CPU_DIR := $(MAIN_FBA_DIR)/cpu
FBA_LIB_DIR := $(MAIN_FBA_DIR)/dep/libs
FBA_INTERFACE_DIR := $(MAIN_FBA_DIR)/intf

EXTERNAL_ZLIB = 0

ifeq ($(platform), unix)
   TARGET := libsnes.so
   fpic := -fPIC
   SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(LIBSNES_DIR)/link.T
   ENDIANNESS_DEFINES := -DLSB_FIRST
else ifeq ($(platform), osx)
   TARGET := libsnes.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   ENDIANNESS_DEFINES := -DLSB_FIRST
else ifeq ($(platform), ps3)
   TARGET := libsnes.a
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN
   PLATFORM_DEFINES := -D__CELLOS_LV2 -DSH2_INLINE="static inline"
   EXTERNAL_ZLIB = 1
else ifeq ($(platform), sncps3)
   TARGET := libsnes.a
   CXX	= $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
   CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
   AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
   ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN
   PLATFORM_DEFINES += -D__CELLOS_LV2__ -DSN_TARGET_PS3 -DSH2_INLINE="static inline"
   EXTERNAL_ZLIB = 1
else ifeq ($(platform), xenon)
   TARGET := libsnes.a
   CC = xenon-gcc
   CXX = xenon-g++
   AR = xenon-ar
   ENDIANNESS_DEFINES = -DWORDS_BIGENDIAN
   PLATFORM_DEFINES := -D__LIBXENON__ -m32 -D__ppc__ -DSH2_INLINE="static inline"
else ifeq ($(platform), wii)
   TARGET := libsnes.a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar
   ENDIANNESS_DEFINES = -DWORDS_BIGENDIAN
   PLATFORM_DEFINES := -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -DSH2_INLINE="static inline"
   EXTERNAL_ZLIB = 1
else
   TARGET := snes.dll
   CC = gcc
   CXX = g++
   SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(LIBSNES_DIR)/link.T
   LDFLAGS += -static-libgcc -static-libstdc++
   ENDIANNESS_DEFINES := -DLSB_FIRST
endif

all: $(TARGET)

FBA_SRC_DIRS := $(FBA_BURNER_DIR)/libsnes/libsnes.cpp \
		$(FBA_BURN_DRIVERS_DIR)/cps3/cps3run.cpp \
		$(FBA_BURN_DRIVERS_DIR)/cps3/cps3snd.cpp \
		$(FBA_BURN_DRIVERS_DIR)/cps3/d_cps3.cpp \
		$(FBA_BURNER_DIR)/state.cpp \
		$(FBA_BURNER_DIR)/statec.cpp \
		$(FBA_BURNER_DIR)/zipfn.cpp \
		$(FBA_BURNER_DIR)/gamc.cpp \
		$(FBA_BURNER_DIR)/gami.cpp \
		$(FBA_BURN_DIR)/burn.cpp \
		$(FBA_BURN_DIR)/burn_memory.cpp \
		$(FBA_BURN_DIR)/load.cpp \
		$(FBA_BURN_DIR)/devices/eeprom.cpp

ifeq ($(EXTERNAL_ZLIB), 0)
FBA_SRC_DIRS += $(FBA_BURNER_DIR)/unzip.c \
		$(FBA_BURNER_DIR)/ioapi.c	
endif

FBA_LIB_DIRS := $(FBA_LIB_DIR)/zlib

ifeq ($(EXTERNAL_ZLIB), 1)
FBA_DEFINES += -DEXTERNAL_ZLIB
else
FBA_SRC_DIRS += $(FBA_LIB_DIRS)
endif

FBA_CXXSRCS := $(FBA_SRC_DIRS)
FBA_CXXOBJ := $(FBA_CXXSRCS:.cpp=.o)

OBJS := $(FBA_CXXOBJ)

FBA_DEFINES := -DNO_ASMCORE \
	-DNO_AUTOFIRE \
	-DNO_CHEATSEARCH \
	-DNO_COMBO \
	-DUSE_SPEEDHACKS \
	-DNO_PNG \
	-DOLD_AUDIOCORE=0 \
	-D__LIBSNES__ \
	-DNO_INTERFACES \
	$(ENDIANNESS_DEFINES) \
	$(PLATFORM_DEFINES) \
	-DINLINE="static inline"

ifeq ($(DEBUG), 1)
CFLAGS += -O0 -g
CXXFLAGS += -O0 -g
else
CFLAGS += -O3 -DNDEBUG
CXXFLAGS += -O3 -DNDEBUG
endif
ifeq ($(platform), sncps3)
WARNINGS_DEFINES =
else
WARNINGS_DEFINES = -Wno-write-strings
C_STD_DEFINES = -std=gnu99
endif

CFLAGS += $(C_STD_DEFINES) $(fpic) $(WARNINGS_DEFINES) $(FBA_DEFINES)
CXXFLAGS += $(fpic) $(WARNINGS_DEFINES) $(FBA_DEFINES)
LDFLAGS += $(fpic)

INCDIRS := -I$(FBA_BURNER_DIR)/win32 \
	-I$(LIBSNES_DIR) \
	-I$(LIBSNES_DIR)/tchar \
	-I$(FBA_BURN_DIR) \
	-I$(FBA_BURN_DIR)/burner \
	-I$(MAIN_FBA_DIR)/cpu \
	-I$(FBA_BURN_DIR)/snd \
	-I$(FBA_BURN_DIR)/devices \
	-I$(FBA_INTERFACE_DIR) \
	-I$(FBA_INTERFACE_DIR)/input \
	-I$(FBA_INTERFACE_DIR)/cd \
	-I$(FBA_BURNER_DIR) \
	-I$(MAIN_FBA_DIR)/generated \
	-I$(FBA_CPU_DIR) \
	-I$(FBA_CPU_DIR)/m6809 \
	-I$(FBA_CPU_DIR)/m6805 \
	-I$(FBA_CPU_DIR)/m6800 \
	-I$(FBA_CPU_DIR)/h6280 \
	-I$(FBA_CPU_DIR)/nec \
	-I$(FBA_CPU_DIR)/hd6309 \
	-I$(FBA_CPU_DIR)/arm7 \
	-I$(FBA_CPU_DIR)/i8039 \
	-I$(FBA_CPU_DIR)/konami \
	-I$(FBA_CPU_DIR)/m68k \
	-I$(FBA_CPU_DIR)/m6502 \
	-I$(FBA_CPU_DIR)/z80 \
	-I$(FBA_CPU_DIR)/sh2 \
	-I$(FBA_CPU_DIR)/s2650 \
	-I$(FBA_CPU_DIR)/arm \
	-I$(FBA_LIB_DIR)/zlib \
	-I$(FBA_BURN_DIR)/drv/capcom \
	-I$(FBA_BURN_DIR)/drv/dataeast \
	-I$(FBA_BURN_DIR)/drv/cave \
	-I$(FBA_BURN_DIR)/drv/neogeo \
	-I$(FBA_BURN_DIR)/drv/psikyo \
	-I$(FBA_BURN_DIR)/drv/sega \
	-I$(FBA_BURN_DIR)/drv/toaplan \
	-I$(FBA_BURN_DIR)/drv/taito \
	-I$(FBA_LIB_DIR)

ifeq ($(ZLIB_INTERNAL), 0)
INCDIRS += -I$(FBA_LIB_DIR)
endif

$(TARGET): $(OBJS)
	@echo "LD $@"
ifeq ($(platform), ps3)
	@$(AR) rcs $@ $(OBJS)
else ifeq ($(platform), sncps3)
	$(AR) rcs $@ $(OBJS)
else ifeq ($(platform), xenon)
	@$(AR) rcs $@ $(OBJS)
else ifeq ($(platform), wii)
	@$(AR) rcs $@ $(OBJS)
else
	@$(CXX) -o $@ $(SHARED) $(OBJS) $(LDFLAGS)
endif

%.o: %.cpp
	@echo "CXX $<"
	@$(CXX) -c -o $@ $< $(CXXFLAGS) $(INCDIRS)

%.o: %.c
	@echo "CC $<"
	@$(CC) -c -o $@ $< $(CFLAGS) $(INCDIRS)

clean:
	rm -f $(TARGET)
	rm -f $(OBJS)

.PHONY: clean

